# -*- coding: utf-8 -*-
"""MLProjectFinal tfidf and glove.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qSriKh-Usl8T7kyTjmyyydQdYpE3IVc1
"""

#data manipulation
import pandas as pd
import numpy as np
import pickle
import re
import string
import zipfile

#methods and stopwords text processing
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split

#machine learning libraries
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
# plotting
import seaborn as sns
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# sklearn
from sklearn.svm import LinearSVC
from sklearn.naive_bayes import BernoulliNB
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report

from keras.utils import to_categorical, plot_model
from keras.preprocessing import sequence
from keras.preprocessing.text import Tokenizer
from keras.layers import Dense, Flatten, SimpleRNN, LSTM, Conv1D,Bidirectional, MaxPooling1D, Dropout, Activation, BatchNormalization
from keras.models import Model, Sequential, model_from_json, load_model
from keras.optimizers import Adam, SGD
from keras.layers import Embedding,SpatialDropout1D,RNN,SimpleRNN,Layer
from keras.initializers import Constant
import keras

from tqdm import tqdm
from nltk import word_tokenize
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences

from google.colab import drive
drive.mount('/content/drive')

"""**Stopwords**

"""

#creating a stopword set
import nltk
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))
stop = stop_words
# Defining dictionary containing all emojis with their meanings.
emojis = {':)': 'smile', ':-)': 'smile', ';d': 'wink', ':-E': 'vampire', ':(': 'sad', 
          ':-(': 'sad', ':-<': 'sad', ':P': 'raspberry', ':O': 'surprised',
          ':-@': 'shocked', ':@': 'shocked',':-$': 'confused', ':\\': 'annoyed', 
          ':#': 'mute', ':X': 'mute', ':^)': 'smile', ':-&': 'confused', '$_$': 'greedy',
          '@@': 'eyeroll', ':-!': 'confused', ':-D': 'smile', ':-0': 'yell', 'O.o': 'confused',
          '<(-_-)>': 'robot', 'd[-_-]b': 'dj', ":'-)": 'sadsmile', ';)': 'wink', 
          ';-)': 'wink', 'O:-)': 'angel','O*-)': 'angel','(:-D': 'gossip', '=^.^=': 'cat'}

"""**Load the** **Dataset**"""

def load_dataset(filepath, cols):
  df = pd.read_csv(filepath, encoding='ISO-8859-1')
  df.columns = cols 
  return df

"""**Preprocessing**"""

def preprocess_tweets(tweet):
  processedText = []

  #for tweet in textdata:

  # convert all the txt to lowercase
  tweet = tweet.lower()

  # remove any urls
  # tweet = re.sub(r"http\S+|www\S+|https\S+", "", tweet, flags=re.MULTILINE)
  tweet = re.sub(r"http\S+|www\S+|https\S+", "", tweet)

  #remove punctuations
  tweet = tweet.translate(str.maketrans("", "", string.punctuation))

  # remove user @ references and '#' from tweet
  tweet = re.sub(r'\@\w+|\#', "", tweet)

  #remove stopwords
  tweet_tokens = word_tokenize(tweet)
  filtered_words = [ word for word in tweet_tokens if word not in stop_words]

  #stemming
  ps = PorterStemmer()
  stemmed_words = [ps.stem(w) for w in filtered_words]

  #lemmatizing
  lemmatizer = WordNetLemmatizer()
  lemma_words = [lemmatizer.lemmatize(w, pos='a') for w in stemmed_words]
  #lemma_words = [lemmatizer.lemmatize(w, pos='a') for w in filtered_words]

      #processedText.append((lemma_words))
        
  #return processedText

  return " ".join(lemma_words)

# Importing the dataset

#dataset = load_dataset('/content/drive/My Drive/Colab Notebooks/MLProject/training.1600000.processed.noemoticon.csv',
 #            ["sentiment", "ids", "date", "flag", "user", "text"])
zf = zipfile.ZipFile('/content/drive/My Drive/training.1600000.processed.noemoticon.csv.zip') 
DATASET_ENCODING = "ISO-8859-1"
DATASET_COLUMNS  = ["sentiment", "ids", "date", "flag", "user", "text"]
dataset = pd.read_csv(zf.open('training.1600000.processed.noemoticon.csv'), encoding=DATASET_ENCODING, names=DATASET_COLUMNS )
# Removing the unnecessary columns.
dataset = dataset[['sentiment','text']]

# Replacing the values to ease understanding.
dataset['sentiment'] = dataset['sentiment'].replace(4,1)

# Plotting the distribution for dataset.
ax = dataset.groupby('sentiment').count().plot(kind='bar', title='Distribution of data',
                                               legend=False)
ax.set_xticklabels(['Negative','Positive'], rotation=0)

# Storing data in lists.
text, sentiment = list(dataset['text']), list(dataset['sentiment'])

dataset['text']

def preprocess(textdata):    
    processedText = []
    
    # Create Lemmatizer and Stemmer.
    wordLemm = WordNetLemmatizer()
    
    # Defining regex patterns.
    urlPattern        = r"((http://)[^ ]*|(https://)[^ ]*|( www\.)[^ ]*)"
    userPattern       = '@[^\s]+'
    alphaPattern      = "[^a-zA-Z0-9]"
    sequencePattern   = r"(.)\1\1+"
    seqReplacePattern = r"\1\1"
    
    for tweet in textdata:
        tweet = tweet.lower()
        
        # Replace all URls with 'URL'
        tweet = re.sub(urlPattern,' ',tweet)
        # Replace all emojis.
        for emoji in emojis.keys():
            tweet = tweet.replace(emoji, "EMOJI" + emojis[emoji])        
        # Replace @USERNAME to 'USER'.
        tweet = re.sub(userPattern,' ', tweet)        
        # Replace all non alphabets.
        tweet = re.sub(alphaPattern, " ", tweet)
        # Replace 3 or more consecutive letters by 2 letter.
        tweet = re.sub(sequencePattern, seqReplacePattern, tweet)

        tweetwords = ''
        for word in tweet.split():
            # Checking if the word is a stopword.
            #if word not in stopwordlist:
            if len(word)>1:
                # Lemmatizing the word.
                word = wordLemm.lemmatize(word)
                tweetwords += (word+' ')
            
        processedText.append(tweetwords)
        
    return processedText

import time
t = time.time()
processedtext = preprocess(text)
print(f'Text Preprocessing complete.')
print(f'Time Taken: {round(time.time()-t)} seconds')

processedtext

processed = pd.DataFrame()
processed['text'] = processedtext
processed['sentiment'] = dataset['sentiment']

processed

X_train, X_test, y_train, y_test = train_test_split(processedtext, sentiment,
                                                    test_size = 0.05,stratify = sentiment, random_state = 0)

processed = pd.DataFrame()
processed['text'] = X_test
processed['sentiment'] = y_test

processed

processed.to_csv("sample_processed.csv" ,  index=False)
processed = processed.dropna(axis=0)

processed = pd.read_csv("/content/sample_processed.csv")

processed.info()

processed = processed.dropna(axis=0)

processed

X_train, X_test, y_train, y_test = train_test_split(processed['text'], processed['sentiment'],
                                                    test_size = 0.3,stratify =  processed['sentiment'], random_state = 0)

X_train

data_neg = processedtext[:800000]
plt.figure(figsize = (20,20))
wc = WordCloud(max_words = 1000 , width = 1600 , height = 800,
               collocations=False).generate(" ".join(data_neg))
plt.imshow(wc)

"""**word cloud for positive data**"""

data_pos = processedtext[800000:]
wc = WordCloud(max_words = 1000 , width = 1600 , height = 800,
              collocations=False).generate(" ".join(data_pos))
plt.figure(figsize = (10,10))
plt.imshow(wc)

X_train, X_test, y_train, y_test = train_test_split(processedtext, sentiment,
                                                    test_size = 0.3,stratify = sentiment, random_state = 0)
print(f'Data Split done.')
copy_test = X_test

"""tf idf vectorizer"""

vectoriser = TfidfVectorizer(ngram_range=(1,2), max_features=500000)
vectoriser.fit(X_train)
print(f'Vectoriser fitted.')
print('No. of feature_words: ', len(vectoriser.get_feature_names()))
X_train = vectoriser.transform(X_train)
X_test  = vectoriser.transform(X_test)

X_train = vectoriser.transform(X_train)
X_test  = vectoriser.transform(X_test)

"""glove vectorizer"""

processed.to_csv("sample_processed.csv" ,  index=False)
processed = processed.dropna(axis=0)
X_train, X_test, y_train, y_test = train_test_split(processed['text'], processed['sentiment'],
                                                    test_size = 0.3,stratify =  processed['sentiment'], random_state = 0)

df = pd.DataFrame()

df['Sentence'] = processedtext

processedtext

embeddings_dict = {}
with open("/content/drive/MyDrive/glove.6B.50d.txt", 'r', encoding='utf-8') as f:
    for line in f:
        values = line.split()
        token = values[0]
        vector = np.asarray(values[1:], "float32")
        embeddings_dict[token] = vector

def create_corpus(df):
    corpus=[]
    i=0
    for tweet in tqdm(df['text']):
        words=[word.lower() for word in word_tokenize(tweet) if((word.isalpha()==1) & (word not in stop))]
        corpus.append(words)
    return corpus

corpus = create_corpus(processed)

corpus

MAX_LEN = 50
token_obj = Tokenizer()
token_obj.fit_on_texts(corpus)
sequences=token_obj.texts_to_sequences(corpus)
text_pad =pad_sequences(sequences,maxlen=MAX_LEN,truncating='post',padding='post')

word_index=token_obj.word_index
print('Number of unique words:',len(word_index))

num_words=len(word_index)+1
embedding_matrix=np.zeros((num_words,50))

for word,i in tqdm(word_index.items()):
    if i > num_words:
        continue
 
    emb_vec=embeddings_dict.get(word)
    if emb_vec is not None:
        embedding_matrix[i]=emb_vec

X = text_pad
y = processed['sentiment']
y = np.asarray(y).astype('int')

X_train , X_test ,y_train , y_test = train_test_split(X, y, random_state=42,test_size=0.3, stratify = y)

vec_size = 50
model = Sequential()
model.add(Embedding(num_words,vec_size,input_length=MAX_LEN , embeddings_initializer=Constant(embedding_matrix), trainable = False))
model.add(Dropout(0.1))
model.add(SimpleRNN(50))
model.add(Dropout(0.1))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
model.summary()

history = model.fit(X_train, y_train, batch_size=64, epochs=30)

model.evaluate(X_test ,y_test)

vec_size = 50
model = Sequential()
model.add(Embedding(num_words,vec_size,input_length=MAX_LEN , embeddings_initializer=Constant(embedding_matrix), trainable = False))
model.add(Dropout(0.3))
model.add(LSTM(20))
model.add(Dropout(0.3))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
model.summary()

history = model.fit(X_train, y_train, batch_size=32, epochs=30)

model.evaluate(X_test ,y_test)

vec_size = 50
model = Sequential()
model.add(Embedding(num_words,vec_size,input_length=MAX_LEN , embeddings_initializer=Constant(embedding_matrix), trainable = False))
model.add(Dropout(0.2))
model.add(Conv1D(64, 5, activation='relu'))
model.add(Bidirectional(LSTM(64, dropout=0.2, recurrent_dropout=0.2)))
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(512, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
model.summary()

history = model.fit(X_train, y_train, batch_size=64, epochs=10)

model.evaluate(X_test,y_test)

"""tfidf"""

X_train = vectoriser.transform(X_train)
X_test  = vectoriser.transform(X_test)

def model_Evaluate(model):
    
    # Predict values for Test dataset
    y_pred = model.predict(X_test)

    # Print the evaluation metrics for the dataset.
    print(classification_report(y_test, y_pred))
    
    # Compute and plot the Confusion matrix
    cf_matrix = confusion_matrix(y_test, y_pred)

    categories  = ['Negative','Positive']
    group_names = ['True Neg','False Pos', 'False Neg','True Pos']
    group_percentages = ['{0:.2%}'.format(value) for value in cf_matrix.flatten() / np.sum(cf_matrix)]

    labels = [f'{v1}\n{v2}' for v1, v2 in zip(group_names,group_percentages)]
    labels = np.asarray(labels).reshape(2,2)

    sns.heatmap(cf_matrix, annot = labels, cmap = 'Blues',fmt = '',
                xticklabels = categories, yticklabels = categories)

    plt.xlabel("Predicted values", fontdict = {'size':14}, labelpad = 10)
    plt.ylabel("Actual values"   , fontdict = {'size':14}, labelpad = 10)
    plt.title ("Confusion Matrix", fontdict = {'size':18}, pad = 20)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler(with_mean=False)
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

BNBmodel = BernoulliNB(alpha = 2)
BNBmodel.fit(X_train, y_train)
model_Evaluate(BNBmodel)

from sklearn import svm
svm_clf= svm.SVC(kernel='rbf')
svm_clf = svm_clf.fit(X_train , y_train)
model_Evaluate(svm_clf)

SVCmodel = LinearSVC()
SVCmodel.fit(X_train, y_train)
model_Evaluate(SVCmodel)

LRmodel = LogisticRegression(C = 2, max_iter = 500, n_jobs=-1)
LRmodel.fit(X_train, y_train)
model_Evaluate(LRmodel)



from xgboost import XGBClassifier
xgbmodel = XGBClassifier(max_depth=50, n_estimators=10, learning_rate=0.1, colsample_bytree=.7, gamma=0, reg_alpha=4, objective='binary:logistic', eta=0.3, silent=1, subsample=0.8)
xgbmodel.fit(X_train, y_train)
model_Evaluate(xgbmodel)



from sklearn.neural_network import MLPClassifier
mlp = MLPClassifier(random_state=1, max_iter=10)
mlp = mlp.fit(X_train, y_train)
model_Evaluate(mlp)

"""tfidf one gram only"""

X_train, X_test, y_train, y_test = train_test_split(processed['text'], processed['sentiment'],
                                                    test_size = 0.3,stratify =  processed['sentiment'], random_state = 0)

vectoriser = TfidfVectorizer(ngram_range=(1,1), max_features=500000)
vectoriser.fit(X_train)
print(f'Vectoriser fitted.')
print('No. of feature_words: ', len(vectoriser.get_feature_names()))
X_train = vectoriser.transform(X_train)
X_test  = vectoriser.transform(X_test)

BNBmodel = BernoulliNB(alpha = 2)
BNBmodel.fit(X_train, y_train)
model_Evaluate(BNBmodel)

LRmodel = LogisticRegression(C = 2, max_iter = 500, n_jobs=-1)
LRmodel.fit(X_train, y_train)
model_Evaluate(LRmodel)

"""tfidf one gram and bigram"""

X_train, X_test, y_train, y_test = train_test_split(processed['text'], processed['sentiment'],
                                                    test_size = 0.3,stratify =  processed['sentiment'], random_state = 0)

vectoriser = TfidfVectorizer(ngram_range=(1,2), max_features=500000)
vectoriser.fit(X_train)
print(f'Vectoriser fitted.')
print('No. of feature_words: ', len(vectoriser.get_feature_names()))
X_train = vectoriser.transform(X_train)
X_test  = vectoriser.transform(X_test)

BNBmodel = BernoulliNB(alpha = 2)
BNBmodel.fit(X_train, y_train)
model_Evaluate(BNBmodel)

LRmodel = LogisticRegression(C = 2, max_iter = 500, n_jobs=-1)
LRmodel.fit(X_train, y_train)
model_Evaluate(LRmodel)

"""tfidf bigram only"""

X_train, X_test, y_train, y_test = train_test_split(processed['text'], processed['sentiment'],
                                                    test_size = 0.3,stratify =  processed['sentiment'], random_state = 0)

vectoriser = TfidfVectorizer(ngram_range=(2,2), max_features=500000)
vectoriser.fit(X_train)
print(f'Vectoriser fitted.')
print('No. of feature_words: ', len(vectoriser.get_feature_names()))
X_train = vectoriser.transform(X_train)
X_test  = vectoriser.transform(X_test)

BNBmodel = BernoulliNB(alpha = 2)
BNBmodel.fit(X_train, y_train)
model_Evaluate(BNBmodel)

LRmodel = LogisticRegression(C = 2, max_iter = 500, n_jobs=-1)
LRmodel.fit(X_train, y_train)
model_Evaluate(LRmodel)

#False Positive
for i in range(0,100):
  if y_test[i] == 0 and y_pre[i] == 1:
    print(copy_test[i])

#False Negative
for i in range(0,100):
  if y_test[i] == 1 and y_pre[i] == 0:
    print(copy_test[i])

file = open('/content/drive/My Drive/MLPROJECT/vectoriser-ngram-(1,2).pickle','wb')
pickle.dump(vectoriser, file)
file.close()

file = open('/content/drive/My Drive/MLPROJECT/Sentiment-LR.pickle','wb')
pickle.dump(LRmodel, file)
file.close()

file = open('/content/drive/My Drive/MLPROJECT/Sentiment-BNB.pickle','wb')
pickle.dump(BNBmodel, file)
file.close()

def load_models():
    '''
    Replace '..path/' by the path of the saved models.
    '''
    
    # Load the vectoriser.
    file = open('..path/vectoriser-ngram-(1,2).pickle', 'rb')
    vectoriser = pickle.load(file)
    file.close()
    # Load the LR Model.
    file = open('..path/Sentiment-LRv1.pickle', 'rb')
    LRmodel = pickle.load(file)
    file.close()
    
    return vectoriser, LRmodel

def predict(vectoriser, model, text):
    # Predict the sentiment
    textdata = vectoriser.transform(preprocess(text))
    sentiment = model.predict(textdata)
    
    # Make a list of text with sentiment.
    data = []
    for text, pred in zip(text, sentiment):
        data.append((text,pred))
        
    # Convert the list into a Pandas DataFrame.
    df = pd.DataFrame(data, columns = ['text','sentiment'])
    df = df.replace([0,1], ["Negative","Positive"])
    return df

if __name__=="__main__":
    # Loading the models.
    #vectoriser, LRmodel = load_models()
    
    # Text to classify should be in a list.
    text = ["I hate twitter",
            "May the Force be with you.",
            "Mr. Stark, I don't feel so good"]
    
    df = predict(vectoriser, LRmodel, text)
    print(df.head())